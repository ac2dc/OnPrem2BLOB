{
	"name": "PL_Master",
	"properties": {
		"activities": [
			{
				"name": "Get config table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "select * from config_master",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "SqlServerTableSource",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get config table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get config table').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Max Id from deta column",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@{concat('select max(', item().delta_column, ') as max_id from ', item().schema_name, '.', item().table_name)}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SqlServerTableSource",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Max Id from deta column",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(item().load_type, 'stg')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Inc Extract",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "@if(equals(item().query_text, ''),\n    concat('select * from ', item().schema_name, '.', item().table_name, ' where ', item().delta_column, ' > ', item().last_processed_value),\n    concat(item().query_text, ' where ', item().delta_column, ' > ', item().last_processed_value)\n)\n",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings",
													"copyBehavior": "FlattenHierarchy"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "SqlServerTableSource",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "db_blobsink",
												"type": "DatasetReference",
												"parameters": {
													"schema_name": {
														"value": "@item().schema_name",
														"type": "Expression"
													},
													"table_name": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "update last modified id",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "Inc Extract",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "LS_OnPrem",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "Query",
													"text": {
														"value": "UPDATE config_master\nSET last_processed_value = @{activity('Get Max Id from deta column').output.value[0].max_id}\nWHERE id = @{item().id}",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									},
									{
										"name": "Convert tables to unity catalog",
										"type": "DatabricksNotebook",
										"state": "Inactive",
										"onInactiveMarkAs": "Succeeded",
										"dependsOn": [
											{
												"activity": "update last modified id",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": "/Users/bhaskarjyotidas@snp.com/Reading a parquet file",
											"baseParameters": {
												"delta_col": {
													"value": "@item().delta_column",
													"type": "Expression"
												},
												"root_path": {
													"value": "@{concat('abfss://test@saeusdatabricks.dfs.core.windows.net', '//',formatDateTime(utcNow(),'ddMMMM'),'//')}",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ls_az_db",
											"type": "LinkedServiceReference"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Copy data1",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "@{if(equals(item().query_text, ''), concat('select * from ', item().schema_name, '.', item().table_name), item().query_text)}\n",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "SqlServerTableSource",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "db_blobsink",
												"type": "DatasetReference",
												"parameters": {
													"schema_name": {
														"value": "@item().schema_name",
														"type": "Expression"
													},
													"table_name": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}